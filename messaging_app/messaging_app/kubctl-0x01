#!/bin/bash

# kubctl-0x01 - Scale Django App and Perform Load Testing
# This script scales the Django deployment, verifies pods, performs load testing, and monitors resources

set -e  # Exit on any error

echo "=== Kubernetes Django App Scaling and Load Testing ==="
echo

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if kubectl is available
if ! command_exists kubectl; then
    echo "Error: kubectl is not installed or not in PATH"
    exit 1
fi

# Check if cluster is running
echo "1. Checking Kubernetes cluster status..."
if ! kubectl cluster-info >/dev/null 2>&1; then
    echo "Error: Kubernetes cluster is not running. Please start your cluster first."
    exit 1
fi
echo "✓ Kubernetes cluster is running"

echo

# Scale the Django app deployment to 3 replicas
echo "2. Scaling Django app deployment to 3 replicas..."
kubectl scale deployment django-messaging-app --replicas=3

# Wait a moment for scaling to take effect
echo "Waiting for scaling to complete..."
sleep 10

# Verify scaling was successful
echo "✓ Deployment scaled successfully"

echo

# Verify that multiple pods are running
echo "3. Verifying multiple pods are running..."
echo "Current pods:"
kubectl get pods -l app=django-messaging-app

# Count running pods
RUNNING_PODS=$(kubectl get pods -l app=django-messaging-app --field-selector=status.phase=Running --no-headers | wc -l)
echo
echo "Number of running pods: $RUNNING_PODS"

if [ "$RUNNING_PODS" -ge 3 ]; then
    echo "✓ Successfully scaled to $RUNNING_PODS pods"
else
    echo "⚠ Warning: Expected 3 pods, but only $RUNNING_PODS are running"
    echo "Waiting for pods to become ready..."
    kubectl wait --for=condition=Ready pods -l app=django-messaging-app --timeout=120s
fi

echo

# Install wrk if not available
echo "4. Checking for wrk (load testing tool)..."
if ! command_exists wrk; then
    echo "Installing wrk..."
    sudo apt update
    sudo apt install -y wrk
    echo "✓ wrk installed successfully"
else
    echo "✓ wrk is already installed"
fi

echo

# Get service information for load testing
echo "5. Getting service information..."
SERVICE_PORT=$(kubectl get service django-messaging-service -o jsonpath='{.spec.ports[0].port}')
echo "Service port: $SERVICE_PORT"

# Port forward to access the service for load testing
echo "Setting up port forwarding for load testing..."
kubectl port-forward service/django-messaging-service 8080:$SERVICE_PORT &
PORT_FORWARD_PID=$!

# Wait for port forward to be established
sleep 5

# Check if port forward is working
if ! curl -s http://localhost:8080 >/dev/null 2>&1; then
    echo "⚠ Warning: Port forward may not be ready, continuing anyway..."
fi

echo

# Perform load testing using wrk
echo "6. Performing load testing with wrk..."
echo "Running load test for 30 seconds with 4 threads and 100 connections..."

# Run wrk load test
wrk -t4 -c100 -d30s http://localhost:8080/ || echo "Load test completed (some errors are normal)"

echo

# Stop port forwarding
kill $PORT_FORWARD_PID 2>/dev/null || true

echo

# Monitor resource usage using kubectl top
echo "7. Monitoring resource usage..."

# Check if metrics server is available
echo "Checking if metrics server is available..."
if kubectl top nodes >/dev/null 2>&1; then
    echo "✓ Metrics server is available"
    
    echo
    echo "Node resource usage:"
    kubectl top nodes
    
    echo
    echo "Pod resource usage:"
    kubectl top pods -l app=django-messaging-app
    
else
    echo "⚠ Metrics server is not available. Installing metrics server..."
    kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
    
    echo "Waiting for metrics server to be ready..."
    sleep 30
    
    echo "Node resource usage:"
    kubectl top nodes || echo "Metrics not yet available - may need more time"
    
    echo
    echo "Pod resource usage:"
    kubectl top pods -l app=django-messaging-app || echo "Pod metrics not yet available - may need more time"
fi

echo

# Display final deployment status
echo "8. Final deployment status..."
echo "Deployment info:"
kubectl get deployment django-messaging-app

echo
echo "Pods status:"
kubectl get pods -l app=django-messaging-app -o wide

echo
echo "Service status:"
kubectl get service django-messaging-service

echo

# Display helpful commands for monitoring
echo "=== Scaling and Load Testing Complete ==="
echo
echo "Useful monitoring commands:"
echo "  kubectl get pods -l app=django-messaging-app    # Check pod status"
echo "  kubectl top pods -l app=django-messaging-app    # Check resource usage"
echo "  kubectl logs -l app=django-messaging-app        # Check application logs"
echo "  kubectl describe deployment django-messaging-app # Detailed deployment info"
echo "  kubectl scale deployment django-messaging-app --replicas=5  # Scale to 5 replicas"
echo

echo "✓ Django app successfully scaled and load tested!"

exit 0
